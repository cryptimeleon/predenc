package org.cryptimeleon.predenc.paramgens;

import org.cryptimeleon.craco.common.attributes.Attribute;
import org.cryptimeleon.craco.common.attributes.SetOfAttributes;
import org.cryptimeleon.craco.common.policies.Policy;
import org.cryptimeleon.craco.common.policies.ThresholdPolicy;
import org.cryptimeleon.craco.enc.DecryptionKey;
import org.cryptimeleon.craco.enc.EncryptionKey;
import org.cryptimeleon.craco.enc.KeyPair;
import org.cryptimeleon.predenc.abe.kp.large.ABEKPGPSW06DecryptionKey;
import org.cryptimeleon.predenc.abe.kp.large.ABEKPGPSW06EncryptionKey;
import org.cryptimeleon.predenc.abe.kp.large.ABEKPGPSW06MasterSecret;
import org.cryptimeleon.predenc.abe.kp.large.AbstractABEKPGPSW06;

import java.util.Arrays;
import java.util.List;

public class ABEKPGPSW06TestParamsGenerator {
    /**
     * @return a list of two key pairs attributed by the given {@code attributes}. The first key pair is valid and the
     * second one is invalid
     */
    public static List<KeyPair> generateKeyPairs(AbstractABEKPGPSW06 scheme, ABEKPGPSW06MasterSecret msk,
                                                 Attribute[] attributes) {
        EncryptionKey validPK = ABEKPGPSW06TestParamsGenerator.generateValidPublicKey(scheme, msk, attributes);

        DecryptionKey validSK = ABEKPGPSW06TestParamsGenerator.generateValidPrivateKey(scheme, msk, attributes);
        KeyPair validKeyPair = new KeyPair(validPK, validSK);

        DecryptionKey invalidSK = ABEKPGPSW06TestParamsGenerator.generateInvalidPrivateKey(scheme, msk, attributes);
        KeyPair invalidKeyPair = new KeyPair(validPK, invalidSK);

        return Arrays.asList(validKeyPair, invalidKeyPair);
    }

    /**
     * @return a {@link ABEKPGPSW06EncryptionKey} that is attributed by three attributes given by
     * {@code attributes}
     */
    private static EncryptionKey generateValidPublicKey(AbstractABEKPGPSW06 scheme, ABEKPGPSW06MasterSecret msk,
                                                        Attribute[] attributes) {
        SetOfAttributes validPublicAttributes = new SetOfAttributes();
        validPublicAttributes.add(attributes[0]);
        validPublicAttributes.add(attributes[3]);
        validPublicAttributes.add(attributes[4]);
        return scheme.generateEncryptionKey(validPublicAttributes);
    }

    /**
     * @return a {@link ABEKPGPSW06DecryptionKey} with a policy that is not satisfied by the
     * attributes of the encryption key generated by
     * {@link #generateValidPublicKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])}.
     */
    private static DecryptionKey generateInvalidPrivateKey(AbstractABEKPGPSW06 scheme, ABEKPGPSW06MasterSecret msk,
                                                           Attribute[] attributes) {
        ThresholdPolicy invalidLeftNode = new ThresholdPolicy(2, attributes[0], attributes[1]);
        ThresholdPolicy invalidRightNode = new ThresholdPolicy(2, attributes[2], attributes[3], attributes[4]);
        Policy invalidPolicy = new ThresholdPolicy(2, invalidLeftNode, invalidRightNode);
        return scheme.generateDecryptionKey(msk, invalidPolicy);
    }

    /**
     * @return a {@link ABEKPGPSW06DecryptionKey} with a policy that is satisfied by the attributes of
     * the encryption key generated by
     * {@link #generateValidPublicKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])}.
     */
    private static DecryptionKey generateValidPrivateKey(AbstractABEKPGPSW06 scheme, ABEKPGPSW06MasterSecret msk,
                                                         Attribute[] attributes) {
        ThresholdPolicy leftNode = new ThresholdPolicy(1, attributes[0], attributes[1]);
        ThresholdPolicy rightNode = new ThresholdPolicy(2, attributes[2], attributes[3], attributes[4]);
        Policy validPolicy = new ThresholdPolicy(2, leftNode, rightNode);
        return scheme.generateDecryptionKey(msk, validPolicy);
    }

    /**
     * @return five string attributes to be used with
     * {@link #generateValidPublicKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])},
     * {@link #generateValidPrivateKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])} and
     * {@link #generateInvalidPrivateKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])}
     */
    public static Attribute[] generateStringAttributes() {
        // reuse the CP method for now since the same attributes can be reused
        return ABECPWat11TestParamGenerator.generateStringAttributesToTest();
    }

    /**
     * @return five integer attributes to be used with
     * {@link #generateValidPublicKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])},
     * {@link #generateValidPrivateKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])} and
     * {@link #generateInvalidPrivateKey(AbstractABEKPGPSW06, ABEKPGPSW06MasterSecret, Attribute[])}
     */
    public static Attribute[] generateIntegerAttributes() {
        // reuse the CP method for now since the same attributes can be reused
        return ABECPWat11TestParamGenerator.generateIntegerAttributesToTest();
    }
}
